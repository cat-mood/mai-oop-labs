#include "coord.h"
#include "hexagon.h"
#include <gtest/gtest.h>
#include <cmath>
#include <limits>

bool is_eq(double x, double y) noexcept {
    return (std::fabs(x - y) < std::numeric_limits<double>::epsilon());
}

/*------------------------HEX_GET_CENTER------------------------------------------------------------------*/

TEST(hex_get_center, test01) {
    Hexagon h;
    ASSERT_TRUE(h.get_center() == Coord(0, 0));
}

TEST(hex_get_center, test02) {
    Hexagon h = {Coord(0, 1), Coord(-0.8660254037844386, 0.5), Coord(-0.8660254037844386, -0.5), Coord(0, -1),
    Coord(0.8660254037844386, -0.5), Coord(0.8660254037844386, 0.5)};
    ASSERT_TRUE(h.get_center() == Coord(0, 0));
}

TEST(hex_get_center, test03) {
    Hexagon h = {Coord(0.8660254037844386, 0.5), Coord(0, 1), Coord(-0.8660254037844386, 0.5), Coord(-0.8660254037844386, -0.5), Coord(0, -1),
    Coord(0.8660254037844386, -0.5)};
    ASSERT_TRUE(h.get_center() == Coord(0, 0));
}

TEST(hex_get_center, test04) {
    Hexagon h = {Coord(-0.848076211353316, 10.12916512459885), Coord(-7.348076211353316, 7.129165124598851), Coord(-8, 0),
    Coord(-2.151923788646684, -4.129165124598851), Coord(4.348076211353316, -1.1291651245988508), Coord(5, 6)};
    ASSERT_TRUE(h.get_center() == Coord(-1.5, 3));
}

/*------------------------------HEX_GET_AREA-----------------------------------------------------------------*/


TEST(hex_get_area, test01) {
    Hexagon h;
    ASSERT_TRUE(is_eq((double) h, 0));
}

TEST(hex_get_area, test02) {
    Hexagon h = {Coord(0, 1), Coord(-0.8660254037844386, 0.5), Coord(-0.8660254037844386, -0.5), Coord(0, -1),
    Coord(0.8660254037844386, -0.5), Coord(0.8660254037844386, 0.5)};
    ASSERT_TRUE(is_eq((double) h, 2.5980762113533156));
}

TEST(hex_get_area, test03) {
    Hexagon h = {Coord(-0.8660254037844386, -0.5), Coord(0, -1), Coord(0.8660254037844386, -0.5), 
    Coord(0.8660254037844386, 0.5), Coord(0, 1), Coord(-0.8660254037844386, 0.5)};
    ASSERT_TRUE(is_eq((double) h, 2.5980762113533156));
}

TEST(hex_get_area, test04) {
    Hexagon h = {Coord(-243.5, -198.665), Coord(-15.233731546200573, -290.2637746161375), Coord(178.22626845379943, -138.3787746161375),
    Coord(143.42000000000002, 105.10499999999999), Coord(-84.84626845379944, 196.70377461613748), Coord(-278.3062684537995, 44.81877461613749)};
    ASSERT_TRUE(is_eq((double) h, 157172.76336402984));
}

/*-----------------------------------HEX_EQ------------------------------------------------------------------------*/

TEST(hex_eq, test01) {
    Hexagon h1 = {Coord(0, 1), Coord(-0.8660254037844386, 0.5), Coord(-0.8660254037844386, -0.5), Coord(0, -1),
    Coord(0.8660254037844386, -0.5), Coord(0.8660254037844386, 0.5)};
    Hexagon h2 = {Coord(-0.8660254037844386, -0.5), Coord(0, -1), Coord(0.8660254037844386, -0.5), 
    Coord(0.8660254037844386, 0.5), Coord(0, 1), Coord(-0.8660254037844386, 0.5)};
    ASSERT_TRUE(h1 == h2);
}

TEST(hex_eq, test02) {
    Hexagon h1, h2;
    ASSERT_TRUE(h1 == h2);
}

TEST(hex_eq, test03) {
    Hexagon h1 = {Coord(5, 0), Coord(3, 3.4641016151377544), Coord(-1, 3.4641016151377544), Coord(-3, 0), 
    Coord(-1, -3.4641016151377544), Coord(3, -3.4641016151377544)};
    Hexagon h2 = {Coord(5, 2), Coord(3, 5.464101615137754), Coord(-1, 5.464101615137754), Coord(-3, 2),
    Coord(-1, -1.4641016151377544), Coord(3, -1.4641016151377544)};
    ASSERT_TRUE(h1 == h2);
}

TEST(hex_eq, test04) {
    Hexagon h1 = {Coord(2, 0), Coord(1, 1.7320508075688772), Coord(-1, 1.7320508075688772), Coord(-2, 0),
    Coord(-1, -1.7320508075688772), Coord(1, -1.7320508075688772)};
    Hexagon h2 = {Coord(0, 2), Coord(-1.7320508075688772, 1), Coord(-1.7320508075688772, -1), Coord(0, -2),
    Coord(1.7320508075688772, -1), Coord(1.7320508075688772, 1)};
    ASSERT_TRUE(h1 == h2);
}

/*------------------------------------HEX_NOT_EQ---------------------------------------------------------*/

TEST(hex_not_eq, test01) {
    Hexagon h1 = {Coord(0, 1), Coord(-0.8660254037844386, 0.5), Coord(-0.8660254037844386, -0.5), Coord(0, -1),
    Coord(0.8660254037844386, -0.5), Coord(0.8660254037844386, 0.5)};
    Hexagon h2 = {Coord(-0.8660254037844386, -0.5), Coord(0, -1), Coord(0.8660254037844386, -0.5), 
    Coord(0.8660254037844386, 0.5), Coord(0, 1), Coord(-0.8660254037844386, 0.5)};
    ASSERT_FALSE(h1 != h2);
}

TEST(hex_not_eq, test02) {
    Hexagon h1, h2;
    ASSERT_FALSE(h1 != h2);
}

TEST(hex_not_eq, test03) {
    Hexagon h1 = {Coord(5, 0), Coord(3, 3.4641016151377544), Coord(-1, 3.4641016151377544), Coord(-3, 0), 
    Coord(-1, -3.4641016151377544), Coord(3, -3.4641016151377544)};
    Hexagon h2 = {Coord(5, 2), Coord(3, 5.464101615137754), Coord(-1, 5.464101615137754), Coord(-3, 2),
    Coord(-1, -1.4641016151377544), Coord(3, -1.4641016151377544)};
    ASSERT_FALSE(h1 != h2);
}

TEST(hex_not_eq, test04) {
    Hexagon h1 = {Coord(2, 0), Coord(1, 1.7320508075688772), Coord(-1, 1.7320508075688772), Coord(-2, 0),
    Coord(-1, -1.7320508075688772), Coord(1, -1.7320508075688772)};
    Hexagon h2 = {Coord(0, 2), Coord(-1.7320508075688772, 1), Coord(-1.7320508075688772, -1), Coord(0, -2),
    Coord(1.7320508075688772, -1), Coord(1.7320508075688772, 1)};
    ASSERT_FALSE(h1 != h2);
}

/*--------------------------------------------HEX_GREATER----------------------------------------------------------*/

TEST(hex_greater, test01) {
    Hexagon h1 = {Coord(2, 0), Coord(1, 1.7320508075688772), Coord(-1, 1.7320508075688772), Coord(-2, 0),
    Coord(-1, -1.7320508075688772), Coord(1, -1.7320508075688772)};
    Hexagon h2 = {Coord(5, 0), Coord(2.5, 4.330127018922193), Coord(-2.5, 4.330127018922193), Coord(-5, 0),
    Coord(-2.5, -4.330127018922193), Coord(2.5, -4.330127018922193)};
    ASSERT_TRUE(h2 > h1);
}

TEST(hex_greater, test02) {
    Hexagon h1 = {Coord(2, 0), Coord(1, 1.7320508075688772), Coord(-1, 1.7320508075688772), Coord(-2, 0),
    Coord(-1, -1.7320508075688772), Coord(1, -1.7320508075688772)};
    Hexagon h2 = {Coord(100, 25), Coord(35.17949192431123, 97.27241335952166), Coord(-59.82050807568877, 77.27241335952166),
    Coord(-90, -15), Coord(-25.17949192431123, -87.27241335952166), Coord(69.82050807568876, -67.27241335952166)};
    ASSERT_TRUE(h2 > h1);
}

TEST(hex_greater, test03) {
    Hexagon h1 = {Coord(2, 0), Coord(1, 1.7320508075688772), Coord(-1, 1.7320508075688772), Coord(-2, 0),
    Coord(-1, -1.7320508075688772), Coord(1, -1.7320508075688772)};
    Hexagon h2 = {Coord(0, 2), Coord(-1.7320508075688772, 1), Coord(-1.7320508075688772, -1), Coord(0, -2),
    Coord(1.7320508075688772, -1), Coord(1.7320508075688772, 1)};
    ASSERT_FALSE(h2 > h1);
}

/*---------------------------------------HEX_GREATER_OR_NOT------------------------------------------------------------*/

TEST(hex_greater_or_eq, test01) {
    Hexagon h1 = {Coord(2, 0), Coord(1, 1.7320508075688772), Coord(-1, 1.7320508075688772), Coord(-2, 0),
    Coord(-1, -1.7320508075688772), Coord(1, -1.7320508075688772)};
    Hexagon h2 = {Coord(5, 0), Coord(2.5, 4.330127018922193), Coord(-2.5, 4.330127018922193), Coord(-5, 0),
    Coord(-2.5, -4.330127018922193), Coord(2.5, -4.330127018922193)};
    ASSERT_TRUE(h2 >= h1);
}

TEST(hex_greater_or_eq, test02) {
    Hexagon h1 = {Coord(2, 0), Coord(1, 1.7320508075688772), Coord(-1, 1.7320508075688772), Coord(-2, 0),
    Coord(-1, -1.7320508075688772), Coord(1, -1.7320508075688772)};
    Hexagon h2 = {Coord(100, 25), Coord(35.17949192431123, 97.27241335952166), Coord(-59.82050807568877, 77.27241335952166),
    Coord(-90, -15), Coord(-25.17949192431123, -87.27241335952166), Coord(69.82050807568876, -67.27241335952166)};
    ASSERT_TRUE(h2 >= h1);
}

TEST(hex_greater_or_eq, test03) {
    Hexagon h1 = {Coord(2, 0), Coord(1, 1.7320508075688772), Coord(-1, 1.7320508075688772), Coord(-2, 0),
    Coord(-1, -1.7320508075688772), Coord(1, -1.7320508075688772)};
    Hexagon h2 = {Coord(0, 2), Coord(-1.7320508075688772, 1), Coord(-1.7320508075688772, -1), Coord(0, -2),
    Coord(1.7320508075688772, -1), Coord(1.7320508075688772, 1)};
    ASSERT_TRUE(h2 >= h1);
}

/*------------------------------------------HEX_LESS----------------------------------------------------------*/

TEST(hex_less, test01) {
    Hexagon h1 = {Coord(2, 0), Coord(1, 1.7320508075688772), Coord(-1, 1.7320508075688772), Coord(-2, 0),
    Coord(-1, -1.7320508075688772), Coord(1, -1.7320508075688772)};
    Hexagon h2 = {Coord(5, 0), Coord(2.5, 4.330127018922193), Coord(-2.5, 4.330127018922193), Coord(-5, 0),
    Coord(-2.5, -4.330127018922193), Coord(2.5, -4.330127018922193)};
    ASSERT_FALSE(h2 < h1);
}

TEST(hex_less, test02) {
    Hexagon h1 = {Coord(2, 0), Coord(1, 1.7320508075688772), Coord(-1, 1.7320508075688772), Coord(-2, 0),
    Coord(-1, -1.7320508075688772), Coord(1, -1.7320508075688772)};
    Hexagon h2 = {Coord(100, 25), Coord(35.17949192431123, 97.27241335952166), Coord(-59.82050807568877, 77.27241335952166),
    Coord(-90, -15), Coord(-25.17949192431123, -87.27241335952166), Coord(69.82050807568876, -67.27241335952166)};
    ASSERT_FALSE(h2 < h1);
}

TEST(hex_less, test03) {
    Hexagon h1 = {Coord(2, 0), Coord(1, 1.7320508075688772), Coord(-1, 1.7320508075688772), Coord(-2, 0),
    Coord(-1, -1.7320508075688772), Coord(1, -1.7320508075688772)};
    Hexagon h2 = {Coord(0, 2), Coord(-1.7320508075688772, 1), Coord(-1.7320508075688772, -1), Coord(0, -2),
    Coord(1.7320508075688772, -1), Coord(1.7320508075688772, 1)};
    ASSERT_FALSE(h2 < h1);
}

/*-----------------------------------------HEX_LESS_OR_EQ----------------------------------------------------*/

TEST(hex_less_or_eq, test01) {
    Hexagon h1 = {Coord(2, 0), Coord(1, 1.7320508075688772), Coord(-1, 1.7320508075688772), Coord(-2, 0),
    Coord(-1, -1.7320508075688772), Coord(1, -1.7320508075688772)};
    Hexagon h2 = {Coord(5, 0), Coord(2.5, 4.330127018922193), Coord(-2.5, 4.330127018922193), Coord(-5, 0),
    Coord(-2.5, -4.330127018922193), Coord(2.5, -4.330127018922193)};
    ASSERT_FALSE(h2 <= h1);
}

TEST(hex_less_or_eq, test02) {
    Hexagon h1 = {Coord(2, 0), Coord(1, 1.7320508075688772), Coord(-1, 1.7320508075688772), Coord(-2, 0),
    Coord(-1, -1.7320508075688772), Coord(1, -1.7320508075688772)};
    Hexagon h2 = {Coord(100, 25), Coord(35.17949192431123, 97.27241335952166), Coord(-59.82050807568877, 77.27241335952166),
    Coord(-90, -15), Coord(-25.17949192431123, -87.27241335952166), Coord(69.82050807568876, -67.27241335952166)};
    ASSERT_FALSE(h2 <= h1);
}

TEST(hex_less_or_eq, test03) {
    Hexagon h1 = {Coord(2, 0), Coord(1, 1.7320508075688772), Coord(-1, 1.7320508075688772), Coord(-2, 0),
    Coord(-1, -1.7320508075688772), Coord(1, -1.7320508075688772)};
    Hexagon h2 = {Coord(0, 2), Coord(-1.7320508075688772, 1), Coord(-1.7320508075688772, -1), Coord(0, -2),
    Coord(1.7320508075688772, -1), Coord(1.7320508075688772, 1)};
    ASSERT_TRUE(h2 <= h1);
}

/*---------------------------------HEX_OP_COPY--------------------------------------------------------------------*/

TEST(hex_op_copy, test01) {
    Hexagon h1;
    Hexagon h2 = {Coord(2, 0), Coord(1, 1.7320508075688772), Coord(-1, 1.7320508075688772), Coord(-2, 0),
    Coord(-1, -1.7320508075688772), Coord(1, -1.7320508075688772)};
    h1 = h2;
    ASSERT_TRUE(h1 == h2);
}

TEST(hex_op_copy, test02) {
    Hexagon h1;
    Hexagon h2 = {Coord(2, 0), Coord(1, 1.7320508075688772), Coord(-1, 1.7320508075688772), Coord(-2, 0),
    Coord(-1, -1.7320508075688772), Coord(1, -1.7320508075688772)};
    h2 = h1;
    ASSERT_TRUE(h1 == h2);
}

TEST(hex_op_copy, test03) {
    Hexagon h1 = {Coord(100, 25), Coord(35.17949192431123, 97.27241335952166), Coord(-59.82050807568877, 77.27241335952166),
    Coord(-90, -15), Coord(-25.17949192431123, -87.27241335952166), Coord(69.82050807568876, -67.27241335952166)};
    Hexagon h2(Coord(2, 0), Coord(1, 1.7320508075688772), Coord(-1, 1.7320508075688772), Coord(-2, 0),
    Coord(-1, -1.7320508075688772), Coord(1, -1.7320508075688772));
    h1 = h2;
    ASSERT_TRUE(h1 == h2);
}

/*--------------------------------------HEX_OP_MOVE--------------------------------------------------------------*/

TEST(hex_op_move, test01) {
    Hexagon h1;
    Hexagon h2 = {Coord(2, 0), Coord(1, 1.7320508075688772), Coord(-1, 1.7320508075688772), Coord(-2, 0),
    Coord(-1, -1.7320508075688772), Coord(1, -1.7320508075688772)};
    Hexagon h3(h2);
    h1 = std::move(h2);
    ASSERT_TRUE(h1 == h3);
}

TEST(hex_op_move, test02) {
    Hexagon h1;
    Hexagon h2 = {Coord(2, 0), Coord(1, 1.7320508075688772), Coord(-1, 1.7320508075688772), Coord(-2, 0),
    Coord(-1, -1.7320508075688772), Coord(1, -1.7320508075688772)};
    h2 = std::move(h1);
    ASSERT_TRUE(h2 == Hexagon());
}

TEST(hex_op_move, test03) {
    Hexagon h1 = {Coord(100, 25), Coord(35.17949192431123, 97.27241335952166), Coord(-59.82050807568877, 77.27241335952166),
    Coord(-90, -15), Coord(-25.17949192431123, -87.27241335952166), Coord(69.82050807568876, -67.27241335952166)};
    Hexagon h2(Coord(2, 0), Coord(1, 1.7320508075688772), Coord(-1, 1.7320508075688772), Coord(-2, 0),
    Coord(-1, -1.7320508075688772), Coord(1, -1.7320508075688772));
    Hexagon h3(h2);
    h1 = std::move(h2);
    ASSERT_TRUE(h1 == h3);
}

int main(int argc, char **argv) {
    testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}
